#include <iostream>
#include <stdio.h>
#include <ctype.h>
#include <string>
using namespace std;

string userInput;

char array[10][15];
char array2[10][15];
string array3[10]; // flags that denote if a set contains | 
char array4[10][15]; // stores first elements 
char array5[10][15]; // closure array

int counter = 0;
int counter2 = 1;
int counter3 = 0;
int counter5 = 0; // offset for closure


char array6[10];
int flag = 0;
char hold;
int counter6 = 0;

void display(){
    cout << "\nDisplaying phase 1: User input\n";
    for (int i=0; i<10; i++){
        if (array[i][0] == NULL){
            // do nothing
        }
        else{
            for (int k=0; k<=14; k++){
                // check if current index is empty
                if (array[i][k] == NULL){
                    // do nothing
                }
                else
                    cout << array[i][k];
            }
            cout << endl;
        }
    }
}

void display2(){
    cout << "Displaying phase 2: Cleaned user input\n";
    for (int i=0; i<10; i++){
        if (array2[i][0] == NULL){
            // do nothing
        }
        else{
            for (int k=0; k<=14; k++){
                // check if current index is empty 
                if (array2[i][k] == NULL){
                    // do nothing
                }
                else
                    cout << array2[i][k] << " ";
            }
            cout << endl;
        }
    }
    cout << endl << endl;
}

void display3(){
    cout << "Displaying phase 3: Flagged sets containing |\n";
    for (int k=0; k<=10; k++){
        cout << array3[k] << "-";
    }
    cout << endl << endl;
}

void display4(){
    cout << "Displaying phase 4: Closure\n" << "I0:\n";
    for (int i=0; i<10; i++){
        if (array5[i][0] == NULL){
            // do nothing
        }
        else{
            cout << array5[i][0] << "->";
            for (int k=1; k<=14; k++){
                // check if current index is empty 
                if (array5[i][k] == NULL){
                    // do nothing
                }
                else
                    cout << array5[i][k];
            }
            cout << endl;
        }
    }
    cout << endl << endl;
}

void display5(){
    cout << "Displaying phase 5: Unique chars in sets\n";
    for (int k=0; k<=10; k++){
        cout << array6[k] << "-";
    }
    cout << endl << endl;
}

void cleanup(){ // This cleans up user input, removing the -> after the production 
    for (int i=0; i<=10; i++){
        if (array[i][0] == NULL){ // if index[0] is empty, then its empty set & end it
            break;
        }
        array2[i][0] = array[i][0]; // set index[0] of clean array2 == index[0] of array
        for (int k=3; k<=15; k++){
            if (array[i][k] == NULL){
                // end of current set
                break;
            }
            else{   // not at end of set, so add current index to new array2
                if (array[i][k] == '|'){    // should give foresight into a set with a flag for |
                    array3[i] = "1"; 
                }
                array2[i][counter2] = array[i][k];  // set current index[counter2] to current array[i][k]
                counter2++; // increase index position by 1
            }
        }
        counter2 = 1;   // so that next time, the index will be set to 1 in next set
    }
}

void first(int set, int at){
    if (array[set][0] == NULL){
        // empty set, move on
    }
    else{
        cout << "First(" << array[set][0] << ")={"; // First(S) 
        // IF Check if index[1] is upper, IF so goto indicated production 
        if (isupper(array2[set][at])){
            // determine what letter / production it is & find the set 
            for (int aa=1; aa<=10; aa++){
                if (array2[aa][0] == array2[set][1]){ // if index 0 == production 
                    first(aa, 1);
                }
            }
            // check if next char in current set is lower to end 
            if (islower(array2[set][(at+1)])){
                array4[set][counter3] = array2[set][(at+1)];
                counter3++;
            }
            else if (isupper(array2[set][(at+1)])){
                // look for the set that matches production 
                for (int aaa=1; aaa<=10; aaa++){
                    if (array2[aaa][0] == array2[set][(at+1)]){
                        first(aaa, 1);
                    }
                }
            }
            // else 
        }
        // ELSEIF Check if the set is flagged. IF so then look into it 
        if (array3[set] == "1"){ // IF FLAGGED & LOWER (TERMINAL)
            for (int a=1; a<=15; a++){
                if (array2[set][a] == '|'){ // check index after | 
                    if (islower(array2[set][(a+1)])){   // LOWERCASE AFTER |
                        array4[set][counter3] = array2[set][(a+1)];
                        cout << array2[set][(a+1)];
                        counter3++;
                    }
                }
            }
        }
        // ELSEIF Check if the index[1] is lower
        if (islower(array2[set][1])){
            cout << array2[set][1];
            array4[set][counter3] = array2[set][1];
            counter++;
        }
            // For loop to check where the | is
                // IF position after | is upper
                // ELSE position aft | is lower

        // ELSE its lower, end it TERMINAL
        //else if (islower(array3[set])){

        //}
        cout << "}\n";
    }
}

// closure interacts with array2 (storing the clean inputs)
void closure(){
    for (int i=0; i<=10; i++){
        if (array2[i][0] == NULL){
            // do nothing empty set
        }
        else{
            //cout << array2[i][0] << "->"; // list index[0] of current set
            array5[i][0] = array2[i][0];
            array5[i][1] = '.';
            counter5 = 1;
            for (int k=1; k<=15; k++){
                if (array2[i][k] == '|'){
                    array5[i][k] = array2[i][(k-1)]; // weird fix for a problem I couldn't figure out the origin of 
                    array5[i][(k+1)] = '|';          // logically it should work without this k-1 since it should 
                    array5[i][(k+2)] = '.';          // store the input before | but it doesnt so I added in this 
                    counter5++;                      // tidbit to fix it. Still dont know how it does that...
                }
                else{
                    array5[i][(k+counter5)] = array2[i][k]; 
                }
            }
        }
    }
}


void goto1(){
    for (int i=0; i<10; i++){           //goes through each set 
        for (int k=2; k<=15; k++){      //goes through each index of a set
            flag = 0;
            for (int o=0; o<=10; o++){  //goes through each index in bag
                if (array6[o] == array5[i][k]){
                    flag = 0;
                    break;
                }
                else{
                    flag = 1;   //new char found, not in array6
                    hold = array5[i][k];
                }
            }
            if (flag){
                if (array5[i][k] == '|' || array5[i][k] == '.'){
                    // do nothing
                }
                else{
                    array6[counter6] = array5[i][k];    //new char added to array6
                    counter6++;
                }
            }
        }
    }

    // finished finding uniques 
    int counter7 = 1;
    int counter8 = 0;
    char temp;
    for (int o=0; o<=10; o++){  // unique char
        if (array6[o] == NULL){
            // do nothing
        }
        else{
            temp = array6[o];
            cout << "I" << counter7 << endl;
            for (int i=0; i<10; i++){       // Set
                for (int k=2; k<=15; k++){  // index in set
                    if (temp == array5[i][k]){  // if match, then work on it
                        counter8 = 0;
                        if (k == 2){    // if its first move . back a position & print
                            // do for loop to list out
                            for (int index=0; index <= 14; index++){
                                if (array5[i][index] == '.'){
                                    cout << "->" << array5[i][(index+1)] << ".";
                                    for (int c=(index+2); c<=14; c++){
                                        if (array5[i][c] == NULL){
                                            // do nothing
                                        }
                                        else 
                                            cout << array5[i][c];
                                    }
                                    break;
                                }
                                else{
                                    cout << array5[i][index];
                                }
                            }
                        }
                        else{
                            for (int index=0; index<=14; index++){
                                //cout << array[i][index];              // ADDRESS THIS MAKES TOO MUCH OUTPUT 
                            }
                        }
                        cout << endl;
                    }
                }
            }
            counter7++;
        }
    }
}

// BEGIN MAIN
int main(){
    cout << "Enter inputs. When done use $ to proceed:\n";
    while (userInput != "$"){
        cin >> userInput;
        if (userInput == "$"){
            break;
        }
        else{
            for (int i=0; i<userInput.length(); i++){
                array[counter][i] = userInput[i];
            }
            counter++;
        }
    }
    display(); // Displays user input 
    cout << endl;
    cleanup(); // Cleans up user input
    display2();// Displays cleaned user input
    // could just create 1 display function & pass it the array to display but saving time 
    display3();

    for (int i=10; i >= 0; i--){
        first(i, 1); // look at set[i], at index 1
        counter3 = 0;
    }

    closure();
    display4();

    goto1();
    display5();
}
// END MAIN
